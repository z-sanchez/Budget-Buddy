generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model BankAccount {
  id     String       @id @default(cuid())
  userId String
  amount Decimal @db.Decimal(19, 2)
  name   String  @db.VarChar(45)
  color     String  @db.VarChar(45) @default("#000000")
  dashboard Int?    @db.TinyInt
}

model Budget {
  id        String     @id @default(cuid())
  name      String  @db.VarChar(45)
  color     String  @db.VarChar(45)
  amount    Decimal @db.Decimal(13, 2)
  longTerm  Int?    @db.TinyInt
  account   String  @db.VarChar(45)
  balance   Decimal @db.Decimal(13, 2)
  userId    String
  dashboard Int?    @db.TinyInt

  @@index([userId], map: "userId")
}

model posts {
  id         Int      @id @unique(map: "id_UNIQUE") @default(autoincrement())
  title      String   @db.VarChar(100)
  body       String   @db.Text
  created_at DateTime @db.Date
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  color         String    @db.VarChar(45) @default("#000000")
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model LongTermBudget {
  id        String  @id @default(cuid())
  name      String  @db.VarChar(45)
  color     String  @db.VarChar(45)
  goal      Decimal @db.Decimal(13, 2)
  dashboard Int?    @db.TinyInt
  saved     Decimal @db.Decimal(13, 2)
  userId    String
  priority  Int
  accountId String

  @@index([userId], map: "userId")
}

model Transaction {
  id        String   @id @default(cuid())
  amount    Decimal  @db.Decimal(19, 2)
  accountId String
  userId    String
  budgetId  String
  date      DateTime @db.DateTime(0)
  name      String   @db.VarChar(45)
}